import { countNumberOfTreesEncountered } from './index';

const path = { stepsRightward: 3, stepsDownward: 1 };

describe('Day 3', () => {
  it('should find the number of trees encountered in two lines', () => {
    const twoLines: string[] = [
      '.............#...#....#.....##.',
      '.#...##.........#.#.........#.#',
    ];

    const numberOfTrees = countNumberOfTreesEncountered(twoLines, path);

    expect(numberOfTrees).toBe(0);
  });

  it('should find the number of trees encountered in three lines', () => {
    const threeLines: string[] = [
      '.............#...#....#.....##.',
      '.#...##.........#.#.........#.#',
      '.....##......#.......#.........',
    ];

    const numberOfTrees = countNumberOfTreesEncountered(threeLines, path);

    expect(numberOfTrees).toBe(1);
  });

  it('should find the number of trees encountered after wrapping back to the start', () => {
    const moreLines: string[] = [
      '.............#...#....#.....##.',
      '.#...##.........#.#.........#.#',
      '.....##......#.......#.........',
      '.......#...........#.#.........',
      '#...........#...#..#.#......#..',
      '.........##....#.#...#.........',
      '.....#.........#.#...........#.',
      '....#...............##....##...',
      '#.#.............#..#.......#.#.',
      '...#...........................',
      '......#..#....#.............#..',
      '........#......#.......#.......',
      '....#.....#..#.#...#.........#.',
      '..#.#.......#.##...#....#.....#',
      '...........#.........#..#......',
      '#...........#.#..#...#.#.#....#',
      '........#......................',
      '....#.#.....#....#.......#..#..',
      '.............................#.',
      '....##..........#.....##......#',
      '......#.....................#..',
      '..#.....##.......#.............',
      '....#.#..............#.#.......',
      '..#.#........#.....#..##.......',
      '.....#...##.........##....#.#..',
      '.#....#..#..#...........#......',
      '.............#.....##........#.',
      '..#....#............#.........#',
      '###..........#........#.......#',
      '#...#..#.#.#.........#..#......',
      '..#....#......#.............#..',
      '#...#........#..#...#.....#....',
      '.#..........#.#........#.......',
      '#.....#.........#..#......#....',
      '....#....##........#......#....',
      '.......#....#.....#..#..#.....#',
      '.........#...#.#...#.##........',
      '.##.##...........#..##..#......',
      '.#.##....#........#...#........',
      '.......##.........##.####.....#',
      '....#..##....#.................',
    ];

    const numberOfTrees = countNumberOfTreesEncountered(moreLines, path);

    expect(numberOfTrees).toBe(16);
  });

  it('should find the number of trees encountered on an arbitrary path in multiple lines', () => {
    const moreLines: string[] = [
      '.............#...#....#.....##.',
      '.#...##.........#.#.........#.#',
      '.....##......#.......#.........',
      '.......#...........#.#.........',
      '#...........#...#..#.#......#..',
      '.........##....#.#...#.........',
      '.....#.........#.#...........#.',
      '....#...............##....##...',
      '#.#.............#..#.......#.#.',
      '...#...........................',
      '......#..#....#.............#..',
      '........#......#.......#.......',
    ];

    const arbitraryPath = { stepsRightward: 2, stepsDownward: 1 };

    const numberOfTrees = countNumberOfTreesEncountered(
      moreLines,
      arbitraryPath
    );

    expect(numberOfTrees).toBe(2);
  });
});
